// This file is part of midnightntwrk/example-counter.
// Copyright (C) 2025 Midnight Foundation
// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

pragma language_version 0.17;
import CompactStandardLibrary;

enum LoanStatus {
    Approved,
    Rejected,
}
export struct LoanApplication {
    authorizedAmount: Uint<16>;
    status: LoanStatus;
}
struct Applicant {
    creditScore: Uint<16>;
    monthlyIncome: Uint<16>;
    monthsAsCustomer: Uint<16>;
}

constructor() {
    admin = ownPublicKey();
}

export ledger blacklist: Set<ZswapCoinPublicKey>;
export ledger loans: Map<ZswapCoinPublicKey, Map<Uint<16>, LoanApplication>>;
export ledger admin: ZswapCoinPublicKey;
export ledger usersCount: Counter;

witness getRequesterScoringWitness(): Applicant;

export circuit requestLoan(requester:ZswapCoinPublicKey, amountRequested:Uint<16>):[] {
    assert (blacklist.member(disclose(requester)), "Requester is blacklisted");
    const profile = getRequesterScoringWitness();
     // Tier 1: Best applicants
    if (profile.creditScore >= 700 && profile.monthlyIncome >= 2000 && profile.monthsAsCustomer >= 24) {
        const topTierAmount = 10000;
        createLoan(requester, amountRequested, topTierAmount, LoanStatus.Approved);
    }
/*      // Tier 2: Good applicants
    if (profile.creditScore >= 600 && profile.monthlyIncome >= 1500) {
        const topTierAmount = 7000;
        createLoan(requester, amountRequested, topTierAmount, LoanStatus.Approved);
    }
    // Tier 3: Basic eligibility
    if (profile.creditScore >= 580) {
        const topTierAmount = 3000;
        createLoan(requester, amountRequested, topTierAmount, LoanStatus.Approved);
    }

    if (profile.creditScore <= 580) {
        createLoan(requester, amountRequested, 0, LoanStatus.Rejected);
    } */
    return [];
}

circuit createLoan(requester: ZswapCoinPublicKey, amountRequested: Uint<16>, topTierAmount: Uint<16>, status: LoanStatus): [] {
    const authorizedAmount = amountRequested > topTierAmount ? topTierAmount : disclose(amountRequested);
    const disclosedRequester = disclose(requester);
    const totalLoans = loans.lookup(disclosedRequester).size();
  /*   const loan = LoanApplication {
        authorizedAmount: authorizedAmount,
        status: status,
    };
    if(!loans.member(requester)) {
        loans.insert(requester, default<Map<Uint<16>, LoanApplication>>);
    }
    const loanNumber = totalLoans + 1;
    loans.lookup(requester).insert(loanNumber as Uint<16>, loan);  */
    return [];
}

export circuit blacklistUser(account: ZswapCoinPublicKey): [] {
    assert(ownPublicKey() == admin, "Only admin can blacklist users");
    blacklist.insert(disclose(account));
    return [];
}

export circuit removeBlacklistUser(account: ZswapCoinPublicKey): [] {
    assert(ownPublicKey() == admin, "Only admin can blacklist users");
    blacklist.remove(disclose(account));
    return [];
}


