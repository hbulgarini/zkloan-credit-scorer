// This file is part of midnightntwrk/example-counter.
// Copyright (C) 2025 Midnight Foundation
// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

pragma language_version 0.17;
import CompactStandardLibrary;

enum LoanStatus {
    Approved,
    Rejected,
}
export struct LoanApplication {
    authorizedAmount: Uint<16>;
    status: LoanStatus;
}
struct Applicant {
    creditScore: Uint<16>;
    monthlyIncome: Uint<16>;
    monthsAsCustomer: Uint<16>;
}

constructor() {
    admin = ownPublicKey();
    MIGRATION_BATCH_SIZE = 5;
}

export ledger blacklist: Set<ZswapCoinPublicKey>;
export ledger loans: Map<Bytes<32>, Map<Uint<16>, LoanApplication>>;
export ledger onGoingPinMigration: Map<Bytes<32>, Uint<16>>;
export ledger admin: ZswapCoinPublicKey;
export ledger usersCount: Counter;
export ledger MIGRATION_BATCH_SIZE: Uint<16>;

witness getRequesterScoringWitness(): Applicant;

export circuit requestLoan(amountRequested:Uint<16>, secretPin: Uint<16>):[] {
    const zwapPublicKey = ownPublicKey();
    const requesterPubKey = publicKey(zwapPublicKey.bytes, secretPin);
    assert (blacklist.member(zwapPublicKey), "Requester is blacklisted");
    const [topTierAmount, status] = evaluateApplicant();
    const disclosedTopTierAmount = disclose(topTierAmount);
    const disclosedStatus = disclose(status);
    createLoan(disclose(requesterPubKey), amountRequested, disclosedTopTierAmount, disclosedStatus);
    
    return [];
}

circuit evaluateApplicant(): [Uint<16>, LoanStatus] {
     const profile = getRequesterScoringWitness();
    // Tier 1: Best applicants
    if (profile.creditScore >= 700 && profile.monthlyIncome >= 2000 && profile.monthsAsCustomer >= 24) {
        return [10000, LoanStatus.Approved];
    }
    // Tier 2: Good applicants
    else if (profile.creditScore >= 600 && profile.monthlyIncome >= 1500) {
        return [7000, LoanStatus.Approved];
     }
    // Tier 3: Basic eligibility
    else if (profile.creditScore >= 580) {
        return [3000, LoanStatus.Approved];
    }
    // If none of the above conditions were met, the applicant is rejected.
    else {
        return [0, LoanStatus.Rejected];
    }
}

circuit createLoan(requester: Bytes<32>, amountRequested: Uint<16>, topTierAmount: Uint<16>, status: LoanStatus): [] {
    const authorizedAmount = amountRequested > topTierAmount ? topTierAmount : amountRequested;
    const totalLoans = loans.lookup(requester).size();
    const loan = LoanApplication {
        authorizedAmount: authorizedAmount,
        status: status,
    };
    if(!loans.member(requester)) {
        loans.insert(requester, default<Map<Uint<16>, LoanApplication>>);
    }
    const loanNumber = totalLoans + 1;
    loans.lookup(requester).insert(loanNumber as Uint<16>, disclose(loan));  
    return [];
}

export circuit blacklistUser(account: ZswapCoinPublicKey): [] {
    assert(ownPublicKey() == admin, "Only admin can blacklist users");
    blacklist.insert(disclose(account));
    return [];
}

export circuit removeBlacklistUser(account: ZswapCoinPublicKey): [] {
    assert(ownPublicKey() == admin, "Only admin can blacklist users");
    blacklist.remove(disclose(account));
    return [];
}

export circuit changePin(oldPin: Uint<16>, newPin: Uint<16>): [] {
    const zwapPublicKey = ownPublicKey();
    const oldPk = publicKey(zwapPublicKey.bytes, oldPin);
    const newPk = publicKey(zwapPublicKey.bytes, newPin);
    assert(loans.member(disclose(oldPk)), "Old PIN does not match any user");
    const topNro = MIGRATION_BATCH_SIZE as Uint<16>;
    const lastMigratedLoan: Uint<16> = onGoingPinMigration.lookup(disclose(oldPk));
    const loansIds: Vector<5, Uint<16>> = [
        (lastMigratedLoan + 1) as Uint<16>,
        (lastMigratedLoan + 2) as Uint<16>,
        (lastMigratedLoan + 3) as Uint<16>,
        (lastMigratedLoan + 4) as Uint<16>,
        (lastMigratedLoan + 5) as Uint<16>
    ];

    for (const currentLoan of loansIds) {
        const nro: Uint<16> = currentLoan as Uint<16>;
        if(loans.lookup(oldPk).member(nro)) {
            const loan = loans.lookup(disclose(oldPk)).lookup(nro);
            if (!loans.member(disclose(newPk))) {
                loans.insert(disclose(newPk), default<Map<Uint<16>, LoanApplication>>);
            }
            loans.lookup(disclose(newPk)).insert(nro, disclose(loan));
            loans.lookup(disclose(oldPk)).remove(nro);
            onGoingPinMigration.insert(disclose(oldPk), nro);
        }
       else {
            onGoingPinMigration.remove(disclose(oldPk));
            loans.remove(disclose(oldPk));
        return [];
       } 
    }

    return [];
}


export circuit publicKey(sk: Bytes<32>, pin: Uint<16>): Bytes<32> {
    const pinBytes = persistentHash<Uint<16>>(pin);
    return persistentHash<Vector<3, Bytes<32>>>(
           [pad(32, "zk-credit-scorer:pk"), pinBytes, sk]);
}
